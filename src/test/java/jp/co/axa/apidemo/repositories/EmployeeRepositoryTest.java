package jp.co.axa.apidemo.repositories;

import jp.co.axa.apidemo.entities.Employee;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@DataJpaTest
public class EmployeeRepositoryTest {

    @Autowired
    private TestEntityManager entityManager;

    @Autowired
    private EmployeeRepository employeeRepository;

    /**
     * Tests that findAll() retrieves list of all employees
     */
    @Test
    public void shouldReturnAllEmployees() {
        Employee employee = getTestEmployeeNoId();
        entityManager.persistAndFlush(employee);

        List<Employee> result = new ArrayList<>();
        employeeRepository.findAll().forEach(e -> result.add(e));
        assertThat(result.size()).isEqualTo(1);
        assertThat(result.get(0)).isEqualTo(employee);
    }

    /**
     * Tests that findById() retrieves the employee entry with given ID
     */
    @Test
    public void shouldReturnEmployeeById() {
        Employee employee = getTestEmployeeNoId();
        Long id = entityManager.persistAndGetId(employee, Long.class);
        entityManager.flush();

        Employee found = employeeRepository.findById(id).get();
        assertThat(employee.getId()).isEqualTo(found.getId());
    }

    /**
     * Tests that save() persists given employee data
     */
    @Test
    public void shouldSaveEmployee() {
        Employee employee = getTestEmployeeNoId();
        employeeRepository.save(employee);

        Employee found = entityManager.find(Employee.class, employee.getId());
        assertThat(employee.getId()).isEqualTo(found.getId());
    }

    /**
     * Tests that deleteById() deletes the employee entry with given ID
     */
    @Test
    public void shouldDeleteEmployeeById() {
        Employee employee = getTestEmployeeNoId();
        Long id = entityManager.persistAndGetId(employee, Long.class);
        entityManager.flush();

        employeeRepository.deleteById(id);
        entityManager.flush();

        Employee found = entityManager.find(Employee.class, employee.getId());
        assertThat(found).isNull();
    }

    /**
     * Creates employee object with dummy data that can be used for tests.
     * Repository tests require that ID is not set in advance, as it will be generated by persistence provider
     * @return
     */
    private Employee getTestEmployeeNoId() {
        Employee employee = new Employee();
        employee.setName("Name");
        return employee;
    }
}
